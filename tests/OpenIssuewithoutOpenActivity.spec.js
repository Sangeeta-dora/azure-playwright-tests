const { test, expect } = require('@playwright/test');
const { mailNotRead } = require('../PageObjects/mailNotRead');
const {ActivityCommunicateWindow} = require('../PageObjects/ActivityCommunicateWindow')
const {OpenIssuewithoutOpenActivity} = require('../PageObjects/OpenIssuewithoutOpenActivity')
const { log } = require('console');
//JSON-> String->js Object
const dataSet = JSON.parse(JSON.stringify(require("../utils/TestData.json")))

test('OpenIssuewithoutOpenActivity_Navigate to OpenIssuewithoutOpenActivity', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
 })
 test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_Refresh', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickonrefresh()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
   
  })
  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_BestFit', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickonBestFit()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()

  })
  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_Click On Density_Comfortable', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnDensity()
    await openIssuewithoutOpenActivity.clickOnComfortable()

  })

  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity_Click On Density_Compact', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnDensity()
    await openIssuewithoutOpenActivity.clickOnCompact()
  })

  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_Click On Density_Standard', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnDensity()
    await openIssuewithoutOpenActivity.clickOnStandard()
  })
  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity_Select Columns_ Hide All', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnSelectColumn()
    await openIssuewithoutOpenActivity.clickOnHideAll()

  })

  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_Select Columns_ Show All', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnSelectColumn()
    await openIssuewithoutOpenActivity.clickOnHideAll()
    await openIssuewithoutOpenActivity.clickOnShowAll()
  })
  test('Internal Message_Navigate to Internal Message Page_navigate to Account Deatils Page', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnFirstCustomer()
    await openIssuewithoutOpenActivity.clickonAccountDetails()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    
  })

  test('openIssuewithoutOpenActivity_Navigate to openIssuewithoutOpenActivity Page_navigate to Account Deatils/New Activity Page', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickOnFirstCustomer()
    await openIssuewithoutOpenActivity.clickOnAccountDetailsNewActivity()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    
  })
  test('Navigate to openIssuewithoutOpenActivity _Navigate to openIssuewithoutOpenActivity Page_Export To Excel', async({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickonExport()
    const downloadPromise = page.waitForEvent('download');
    const download = await downloadPromise;
    await download.saveAs('test-results'+download.suggestedFilename())
   // await internalMessage.verifyDownloadMessage()
  })
  test('Navigate to openIssuewithoutOpenActivity_Verify if the filter option is available', async ({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
    await openIssuewithoutOpenActivity.clickonfilter()
    await expect(openIssuewithoutOpenActivity.firstRow).toBeVisible()
  })
  test('openIssuewithoutOpenActivity_Verify if the add filter option is available', async ({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await openIssuewithoutOpenActivity.clickonfilter()
    await openIssuewithoutOpenActivity.addFilterbuttonavailable()

   });
   test('openIssuewithoutOpenActivity_Verify if the Remove All option is available', async ({ page }) => {
    const mailnotread = new mailNotRead(page)
    const openIssuewithoutOpenActivity = new OpenIssuewithoutOpenActivity(page)
    await mailnotread.navigateURl()
    await mailnotread.validLogin(dataSet.username, dataSet.password)
    await mailnotread.clickonMessages()
    await openIssuewithoutOpenActivity.clickonOpenIssuewithoutOpenActivity()
    await openIssuewithoutOpenActivity.clickonrestrictuncheck()
    await openIssuewithoutOpenActivity.clickonfilter()
    await openIssuewithoutOpenActivity.Removeallbuttonavailable()
   });


