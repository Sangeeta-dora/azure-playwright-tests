name: Run Playwright Tests (Azure Repo)

permissions:
  contents: write
on:
  workflow_dispatch:   # allows manual run
    inputs:
      branch:
        description: 'Branch from Azure'
        required: true
        default: 'main'
      testFile:
        description: 'Test file to run'
        required: true
        default: 'tests/Admin_MasterFiles_ActivityType.spec.js'
      environment:     # ðŸ‘ˆ dropdown/input field when triggering
        description: "Environment to run tests against"
        required: true
        default: "qa"
      workers:
        description: 'Number of workers'
        required: false
        default: '4'  
      retry:
        description: "Number of retries for failed tests (0 = no retries)"
        required: false
        default: '0'   

jobs:
  playwright-test:
    runs-on: ubuntu-latest

    steps:
      - name: Clone Azure Repo
        run: |
          git clone --branch ${{ github.event.inputs.branch }} https://AnytimeCollect:${{ secrets.AZURE_PAT }}@dev.azure.com/AnytimeCollect/Lockstep/_git/TestCases-ReactATC azure-repo
        env:
          GIT_ASKPASS: /bin/echo
          GIT_USERNAME: Lockstep   # usually your Azure DevOps org name
          GIT_PASSWORD: ${{ secrets.AZURE_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd azure-repo
          npm install

      - name: Install Playwright Browsers
        run: |
          cd azure-repo
          npx playwright install --with-deps    

      - name: Run Playwright Tests
        run: |
          cd azure-repo
          echo "::group::Running Playwright Tests"
          npx cross-env ENVIRONMENT=${{ github.event.inputs.environment }} PLAYWRIGHT_SCREENSHOT=on PLAYWRIGHT_VIDEO=on PLAYWRIGHT_TRACE=retain-on-failure playwright test tests/Admin_MasterFiles_ActivityType.spec.js --reporter=list,html --workers=${{ github.event.inputs.workers }} --retries=${{ github.event.inputs.retry }} || true
          echo "::endgroup::"

      - name: Verify Playwright HTML Report
        run: |
          cd azure-repo
          echo "Report folder contents:"
          ls -l playwright-report
          
      - name: Sanitize test file name
        id: sanitize
        run: |
          filename=$(basename "${{ github.event.inputs.testFile }}")
          echo "filename=$filename" >> $GITHUB_OUTPUT   
          
      - name: Version report folder
        id: report_folder
        run: |
          timestamp=$(date +%Y%m%d-%H%M%S)
          report_dir="playwright-report-${{ steps.sanitize.outputs.filename }}-$timestamp"
          mv azure-repo/playwright-report azure-repo/$report_dir
          echo "REPORT_DIR=$report_dir" >> $GITHUB_OUTPUT

      - name: Upload Playwright Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ steps.sanitize.outputs.filename }}
          path: azure-repo/${{ steps.report_folder.outputs.REPORT_DIR }}

      - name: Deploy Playwright Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./azure-repo/${{ steps.report_folder.outputs.REPORT_DIR }}
          publish_branch: gh-pages

      - name: Update Reports Index
        if: always()
        run: |
          # Clone gh-pages branch into a folder
          git config user.name github-actions
          git config user.email github-actions@github.com
          git clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages

          cd gh-pages

          # Create index.html with table + styling
          echo "<html><head><title>Playwright Reports</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; }
            th { background-color: #f4f4f4; text-align: left; }
            tr.latest { background-color: #d4edda; font-weight: bold; } /* green highlight */
          </style>
          </head><body>" > index.html
          echo "<h1>Playwright Reports</h1><table>" >> index.html
          echo "<tr><th>Timestamp</th><th>Test File</th><th>Report Link</th></tr>" >> index.html

          # Add all reports (latest first)
          latest=1
          for dir in $(ls -d playwright-report-* 2>/dev/null | sort -r); do
            if [ -d "$dir" ]; then
              timestamp=$(echo $dir | cut -d'-' -f4-)
              testfile=$(echo $dir | cut -d'-' -f3)
              if [ $latest -eq 1 ]; then
                echo "<tr class='latest'><td>$timestamp</td><td>$testfile</td><td><a href='./$dir/index.html'>View Report</a></td></tr>" >> index.html
                latest=0
              else
                echo "<tr><td>$timestamp</td><td>$testfile</td><td><a href='./$dir/index.html'>View Report</a></td></tr>" >> index.html
              fi
            fi
          done

          echo "</table></body></html>" >> index.html

          # Commit & push changes
          git add index.html
          git commit -m "Update reports index [skip ci]" || echo "No changes to commit"
          git push origin gh-pages

      - name: Show Report URL
        run: |
          echo "Your latest report is available at:"
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ steps.report_folder.outputs.REPORT_DIR }}/index.html"
          echo "Full report history:"
          echo "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
