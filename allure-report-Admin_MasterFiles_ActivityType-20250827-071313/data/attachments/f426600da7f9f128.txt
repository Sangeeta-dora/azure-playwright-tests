# Test info

- Name: Activity Type_Validate Page Controls
- Location: /home/runner/work/azure-playwright-tests/azure-playwright-tests/azure-repo/tests/Admin_MasterFiles_ActivityType.spec.js:251:1

# Error details

```
Error: browserType.launch: Target page, context or browser has been closed
Browser logs:

╔════════════════════════════════════════════════════════════════════════════════════════════════╗
║ Looks like you launched a headed browser without having a XServer running.                     ║
║ Set either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright. ║
║                                                                                                ║
║ <3 Playwright Team                                                                             ║
╚════════════════════════════════════════════════════════════════════════════════════════════════╝
Call log:
  - <launching> /home/runner/.cache/ms-playwright/chromium-1169/chrome-linux/chrome --disable-field-trial-config --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-back-forward-cache --disable-breakpad --disable-client-side-phishing-detection --disable-component-extensions-with-background-pages --disable-component-update --no-default-browser-check --disable-default-apps --disable-dev-shm-usage --disable-extensions --disable-features=AcceptCHFrame,AutoExpandDetailsElement,AvoidUnnecessaryBeforeUnloadCheckSync,CertificateTransparencyComponentUpdater,DeferRendererTasksAfterInput,DestroyProfileOnBrowserClose,DialMediaRouteProvider,ExtensionManifestV2Disabled,GlobalMediaControls,HttpsUpgrades,ImprovedCookieControls,LazyFrameLoading,LensOverlay,MediaRouter,PaintHolding,ThirdPartyStoragePartitioning,Translate --allow-pre-commit-input --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --force-color-profile=srgb --metrics-recording-only --no-first-run --enable-automation --password-store=basic --use-mock-keychain --no-service-autorun --export-tagged-pdf --disable-search-engine-choice-screen --unsafely-disable-devtools-self-xss-warnings --no-sandbox --user-data-dir=/tmp/playwright_chromiumdev_profile-rpp8UT --remote-debugging-pipe --no-startup-window
  - <launched> pid=6083
  - [pid=6083][err] [6083:6083:0827/071307.398493:ERROR:ui/ozone/platform/x11/ozone_platform_x11.cc:249] Missing X server or $DISPLAY
  - [pid=6083][err] [6083:6083:0827/071307.398547:ERROR:ui/aura/env.cc:257] The platform failed to initialize.  Exiting.

```

# Test source

```ts
  151 |
  152 | });
  153 |
  154 | //TC_05 Validate that user is able to create Activity type with only Mandatory fields also
  155 | test('Activity Type_Create Activity Type with Mandatory fields', async({page}, testInfo) => {
  156 |     const loginPage = new LoginPage(page);
  157 |     const pageNav = new PageNavigation(page);
  158 |     const adminMasterFilesActivityType = new Admin_MasterFiles_ActivityType(page);
  159 |     const adminMasterFilesActivityTemplate = new Admin_MasterFiles_ActivityTemplate(page);
  160 |     await loginPage.navigateTo(envConfig.baseURL)
  161 |     await loginPage.login(envConfig.userName, envConfig.password)
  162 |     await pageNav.navigateToAdmin()
  163 |     await pageNav.navigateToAdminMasterFiles()
  164 |     await pageNav.navigateToActivityType()
  165 |     await adminMasterFilesActivityType.clickOnAddNewRecord()
  166 |     await expect(adminMasterFilesActivityType.title_AddRecord).toBeVisible()
  167 |
  168 |     //Fill only Mandatory details
  169 |     var activity_ID = "TestAct_ID_"+Math.floor(Math.random() * 1000)
  170 |     await adminMasterFilesActivityType.fillActivityTypeFormWithMandatoryFieldsOnly("ExpectPay", activity_ID, "Test_desc_1", "4")
  171 |     await adminMasterFilesActivityType.clickOnSubmitActivityTypeForm()
  172 |     await adminMasterFilesActivityType.searchActivityType(activity_ID)
  173 |
  174 |     // Zoom out the page
  175 |     await page.evaluate(() => {
  176 |         document.body.style.zoom = '50%'; // Set the zoom level to 50%
  177 |     });
  178 |
  179 |     //Validate the details of the added Activity Type
  180 |     expect(await adminMasterFilesActivityTemplate.returnFirstRowCellValue_texttype("activityID")).toContain(activity_ID, "Activity ID is not matching")
  181 |     expect(await adminMasterFilesActivityTemplate.returnFirstRowCellValue_texttype("description")).toContain("Test_desc_1", "Description is not matching")
  182 |     expect(await adminMasterFilesActivityTemplate.returnFirstRowCellValue_texttype("displayPriority")).toContain("4", "Priority is not matching")
  183 |
  184 |     //Delete the added Activity Type and verify its deleted successfully
  185 |     await adminMasterFilesActivityTemplate.clickOnDeleteIcon()
  186 |     await expect(adminMasterFilesActivityType.firstRow).not.toBeVisible()
  187 | });
  188 |
  189 | //TC_06 Validate that user is able to perform quick search for each column on activity template page
  190 | test('Activity Type_Quick Search for each column', async({page}, testInfo) => {
  191 |     const loginPage = new LoginPage(page);
  192 |     const pageNav = new PageNavigation(page);
  193 |     const adminMasterFilesActivityType = new Admin_MasterFiles_ActivityType(page);
  194 |     const adminMasterFilesActivityTemplate = new Admin_MasterFiles_ActivityTemplate(page);
  195 |     await loginPage.navigateTo(envConfig.baseURL)
  196 |     await loginPage.login(envConfig.userName, envConfig.password)
  197 |     await pageNav.navigateToAdmin()
  198 |     await pageNav.navigateToAdminMasterFiles()
  199 |     await pageNav.navigateToActivityType()
  200 |     await adminMasterFilesActivityType.clickOnAddNewRecord()
  201 |     await expect(adminMasterFilesActivityType.title_AddRecord).toBeVisible()
  202 |
  203 |     //Fill the form details
  204 |     var activity_ID = "TestAct_ID_"+Math.floor(Math.random() * 1000)
  205 |     await adminMasterFilesActivityType.fillActivityTypeFormDetails("ExpectPay", activity_ID, "Test_desc_2", "5", "Test_note2")
  206 |     await adminMasterFilesActivityType.clickOnSubmitActivityTypeForm()
  207 |
  208 |     //Zoom out the page
  209 |     await page.evaluate(() => {
  210 |         document.body.style.zoom = '50%'; // Set the zoom level to 50%
  211 |     });
  212 |
  213 |     //Validate Quick search for each column
  214 |     expect(await adminMasterFilesActivityTemplate.validateSearchFunctionalityTextvalue("activityID", activity_ID)).toBe(true)
  215 |     expect(await adminMasterFilesActivityTemplate.validateSearchFunctionalityTextvalue("description", "Test_desc_2")).toBe(true)
  216 |     expect(await adminMasterFilesActivityTemplate.validateSearchFunctionalityTextvalue("displayPriority", "5")).toBe(true)
  217 |     expect(await adminMasterFilesActivityTemplate.validateSearchFunctionalityTextvalue("decodedProcedureNote", "Test_note2")).toBe(true)
  218 |     expect(await adminMasterFilesActivityTemplate.validateSelectFunctionalityCheckbox("systemActivity", "false")).toBe(true)
  219 |     expect(await adminMasterFilesActivityTemplate.validateSelectFunctionalityCheckbox("excludeFromDashboard", "true")).toBe(true)
  220 |     expect(await adminMasterFilesActivityTemplate.validateSelectFunctionalityCheckbox("excludeFromCRM", "true")).toBe(true)
  221 |     expect(await adminMasterFilesActivityTemplate.validateSelectFunctionalityCheckbox("active", "true")).toBe(true)
  222 |
  223 |     //Delete the added Activity Type and verify its deleted successfully
  224 |     await adminMasterFilesActivityType.searchActivityType(activity_ID)
  225 |     await adminMasterFilesActivityTemplate.clickOnDeleteIcon()
  226 |     await expect(adminMasterFilesActivityType.firstRow).not.toBeVisible()
  227 | })
  228 |
  229 | //TC_07 Validate that user should not be able to delete any System Actvity type 
  230 | test('Activity Type_User should not be able to Delete System Activity Type', async({page}, testInfo) => {
  231 |     const loginPage = new LoginPage(page);
  232 |     const pageNav = new PageNavigation(page);
  233 |     const adminMasterFilesActivityType = new Admin_MasterFiles_ActivityType(page);
  234 |     await loginPage.navigateTo(envConfig.baseURL)
  235 |     await loginPage.login(envConfig.userName, envConfig.password)
  236 |     await pageNav.navigateToAdmin()
  237 |     await pageNav.navigateToAdminMasterFiles()
  238 |     await pageNav.navigateToActivityType()
  239 |     var pageTitle = await adminMasterFilesActivityType.returnPageName()
  240 |
  241 |     //To Validate page name
  242 |     expect(await adminMasterFilesActivityType.returnPageName()).toContain("Activity Types")
  243 |     await expect(adminMasterFilesActivityType.firstRow).toBeVisible()
  244 |
  245 |     //Search for System Activity Type and try to delete
  246 |     await adminMasterFilesActivityType.searchActivityType("ExpectPay")
  247 |     expect(await adminMasterFilesActivityType.returnIsdeleteBtnDisabled()).toBe(false)
  248 | });
  249 |
  250 | //TC_08 Validate that page controls are working as expected
> 251 | test('Activity Type_Validate Page Controls', async({page}, testInfo) => {
      | ^ Error: browserType.launch: Target page, context or browser has been closed
  252 |     const loginPage = new LoginPage(page);
  253 |     const pageNav = new PageNavigation(page);
  254 |     const adminMasterFilesActivityType = new Admin_MasterFiles_ActivityType(page);
  255 |     const adminMasterFilesActivityTemplate = new Admin_MasterFiles_ActivityTemplate(page);
  256 |     await loginPage.navigateTo(envConfig.baseURL)
  257 |     await loginPage.login(envConfig.userName, envConfig.password)
  258 |     await pageNav.navigateToAdmin()
  259 |     await pageNav.navigateToAdminMasterFiles()
  260 |     await pageNav.navigateToActivityType()
  261 |     var pageTitle = await adminMasterFilesActivityType.returnPageName()
  262 |
  263 |     //To Validate page name
  264 |     expect(await adminMasterFilesActivityType.returnPageName()).toContain("Activity Types")
  265 |     await expect(adminMasterFilesActivityType.firstRow).toBeVisible()
  266 |
  267 |     //Zoom out the page
  268 |     await page.evaluate(() => {
  269 |         document.body.style.zoom = '50%'; // Set the zoom level to 50%
  270 |     });
  271 |     
  272 |     //Validate that Page Controls are working as expected
  273 |     expect(await adminMasterFilesActivityType.validateRecordsPerPage()).toBe(true, "Records are not getting displayed properly")
  274 |     expect(await adminMasterFilesActivityType.validatePageNavigation()).toBe(true, "PageNavigation is not working as expected")
  275 |
  276 | });
  277 |
  278 | //TC_09 Validate that newly created Activity type is getting displayed in activity dropdown in while creating new activity/communication
  279 | test('Activity Type_Newly created Activity type should be displayed in Activity dropdown', async({page}, testInfo) => {
  280 |     const loginPage = new LoginPage(page);
  281 |     const pageNav = new PageNavigation(page);
  282 |     const adminMasterFilesActivityType = new Admin_MasterFiles_ActivityType(page);
  283 |     const adminMasterFilesActivityTemplate = new Admin_MasterFiles_ActivityTemplate(page);
  284 |     const activityWindow = new ActivityCommunicateWindow(page)
  285 |     const accountOverview = new AccountOverview(page);
  286 |     const allaccounts = new AllAccounts(page);
  287 |     await loginPage.navigateTo(envConfig.baseURL)
  288 |     await loginPage.login(envConfig.userName, envConfig.password)
  289 |     await pageNav.navigateToAdmin()
  290 |     await pageNav.navigateToAdminMasterFiles()
  291 |     await pageNav.navigateToActivityType()
  292 |     await adminMasterFilesActivityType.clickOnAddNewRecord()
  293 |     await expect(adminMasterFilesActivityType.title_AddRecord).toBeVisible()
  294 |
  295 |     //Fill the form details
  296 |     var activity_ID = "TestAct_ID_"+Math.floor(Math.random() * 1000)
  297 |     await adminMasterFilesActivityType.fillActivityTypeFormDetails("ExpectPay", activity_ID, "Test_desc_1", "4", "Test_note1")
  298 |     await adminMasterFilesActivityType.clickOnSubmitActivityTypeForm()
  299 |     await adminMasterFilesActivityType.searchActivityType(activity_ID)
  300 |
  301 |     //Navigate to Account Overview page and validate that newly created Activity type is getting displayed in Activity dropdown
  302 |     await pageNav.navigateToAccounts()
  303 |     await pageNav.navigateToAllAccounts()
  304 |     await allaccounts.searchAndClick(dataSet.CustomerName)
  305 |     await allaccounts.clickonAccountDetailsOption()
  306 |
  307 |     await accountOverview.clickonNewActivity()
  308 |     var new_activity = await accountOverview.returnNewActivity()
  309 |     console.log("New Activity is: " + new_activity)
  310 |     expect(new_activity, 'New Activity did not open').toContain("New Activity for " + dataSet.CustomerName);
  311 |
  312 |     expect(await accountOverview.validateActivityType(activity_ID)).toContain(activity_ID, "Newly created Activity type is not getting displayed in Activity dropdown")
  313 |     
  314 |     //Navigate back to Activity Type page and delete the newly created Activity Type
  315 |     await pageNav.navigateToAdmin()
  316 |     await pageNav.navigateToAdminMasterFiles()
  317 |     await pageNav.navigateToActivityType()
  318 |     await expect(adminMasterFilesActivityType.firstRow).toBeVisible()
  319 |     
  320 |     await adminMasterFilesActivityType.searchActivityType(activity_ID)
  321 |     //Delete the added Activity Type and verify its deleted successfully
  322 |     await adminMasterFilesActivityTemplate.clickOnDeleteIcon()
  323 |     await expect(adminMasterFilesActivityType.firstRow).not.toBeVisible()
  324 | });
  325 |
```